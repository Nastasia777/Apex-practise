public class ExceptionHandling {

        // Method to demonstrate exception handling
        public static void divideNumbers(Integer num1, Integer num2) {
        try {
            // Attempt to divide by zero
            Integer result = num1 / num2;
            System.debug('Result: ' + result);
        } catch (ArithmeticException e) {
            // Catch and handle divide by zero error
            System.debug('Error: Division by zero is not allowed');
        } finally {
            // This block will always run
            System.debug('Execution completed');
        }
    }
    
    // Method to demonstrate exception handling with try/catch
    public static void divideNumbers(Integer num1, Integer num2) {
        try {
            // Attempt to divide by zero
            Integer result = num1 / num2;
            System.debug('Result: ' + result);
        } catch (ArithmeticException e) {
            // Catch and handle divide by zero error
            System.debug('Error: Division by zero is not allowed');
        }
    }

    // Method to demonstrate exception handling with try/finally
    public static void tryFinallyExample(Integer num1, Integer num2) {
        try {
            // Attempt to divide
            Integer result = num1 / num2;
            System.debug('Result: ' + result);
        } finally {
            // This block will always run
            System.debug('Execution completed');
        }
    }
}


/*
            // Built-in exceptionals

// Define a string variable but don't initialize it, so it's null
String myString = null;

// Attempt to access a method on the null object
try {
    Integer stringLength = myString.length();  // This line will throw a NullPointerException
} catch (NullPointerException e) {
    System.debug('Caught a NullPointerException: ' + e.getMessage());
}

// ListException
List<Integer> numList = new List<Integer>{1, 2, 3};
try {
    Integer value = numList[5];  // Index out of bounds
} catch (ListException e) {
    System.debug('Error: ' + e.getMessage());
}

// QueryException
try {
    List<Account> accounts = Database.query('SELECT FROM Account');  // Missing fields in query
} catch (QueryException e) {
    System.debug('Error: ' + e.getMessage());
}

//NullPointerException
String str = null;
try {
    Integer len = str.length();  // Null pointer exception
} catch (NullPointerException e) {
    System.debug('Error: ' + e.getMessage());
}

// DmlException
Account acc = new Account();
try {
    insert acc;  // Missing required fields
} catch (DmlException e) {
    System.debug('Error: ' + e.getMessage());
}

// MathException
try {
    Integer result = 5 / 0;  // Division by zero
} catch (MathException e) {
    System.debug('Error: ' + e.getMessage());
}


*/

/*
        //  common exceptional methods

1. getMessage():
Returns a string that contains any error messages generated by the exception.

try {
    Integer result = 5 / 0;  // This will cause a MathException
} catch (Exception e) {
    System.debug('Error Message: ' + e.getMessage());  // Output: Error Message: Divide by 0
}

2. getTypeName():
Returns the name of the exception type.

try {
    Integer result = 5 / 0;  // This will cause a MathException
} catch (Exception e) {
    System.debug('Exception Type: ' + e.getTypeName());  // Output: Exception Type: MathException
}


3. getStackTraceString():
Returns a string that contains the stack trace of the exception.

try {
    Integer result = 5 / 0;  // This will cause a MathException
} catch (Exception e) {
    System.debug('Stack Trace: ' + e.getStackTraceString()); // Output: Stack Trace: Class.ExceptionHandling.divideNumbers: line 5, column 1
}


4. getCause():
Returns the cause of the exception as a new exception.

Exception mainException = new Exception('Main exception');
Exception causedException = mainException.initCause(new Exception('Caused exception'));
try {
    throw mainException;
} catch (Exception e) {
    System.debug('Caused By: ' + e.getCause().getMessage());  // Output: Caused By: Caused exception
}


*/


/*

// DML (Data Manipulation Language): insert, update, delete, or undelete. 

try {
    Account acc = new Account();
    // Missing required field 'Name'
    insert acc;  // This will cause a DmlException
} catch (DmlException e) {
    System.debug('DML Error: ' + e.getMessage());
}
// Output: DML Error: Required fields are missing: [Name]


//ListException

List<Account> accList = new List<Account>();
accList.add(new Account(Name='Test Account'));

try {
    // Trying to access an index that doesn't exist
    Account acc = accList[2];
} catch (ListException e) {
    System.debug('List Error: ' + e.getMessage());
}
// Output: List Error: List index out of bounds: 2

// QueryException: a SOQL query 

try {
    // Malformed Query
    List<Account> accList = Database.query('SELECT From Account');
} catch (QueryException e) {
    System.debug('Query Error: ' + e.getMessage());
}
// Output: Query Error: unexpected token: 'From'
*/



/*
// dml methods

// 1.insert:
// Creating a new Account record
Account acc = new Account(Name='Test Account');
insert acc;  // Inserting the new Account record into the database

// Possible Output: A new Account record is created in the database with the Name 'Test Account'.

// 2. update:

// Assume acc is an existing Account record with ID 001D000000K0fXOIAZ
acc.Phone = '123-456-7890';
update acc;  // Updating the Phone field of the existing Account record

// Possible Output: The Phone field of the Account record with ID 001D000000K0fXOIAZ is updated to '123-456-7890'.

// 3. delete:

// Assume acc is an existing Account record with ID 001D000000K0fXOIAZ
delete acc;  // Deleting the existing Account record from the database

// Possible Output: The Account record with ID 001D000000K0fXOIAZ is deleted from the database.

// 4. upsert (update/insert):

// Creating a new Account record
Account acc = new Account(Name='Test Account');
upsert acc;  // If acc has an ID, it updates the record. If not, it inserts a new record.

// Possible Output: A new Account record is created in the database with the Name 'Test Account'.


// 5.undelete:

// Assume acc is a previously deleted Account record with ID 001D000000K0fXOIAZ
undelete acc;  // Restoring the previously deleted Account record back to the database

// Possible Output: The Account record with ID 001D000000K0fXOIAZ is restored back to the database.

// 6. merge:

// Assume acc1 and acc2 are existing Account records
// and acc1 is being merged into acc2, keeping acc2's record
merge acc2 acc1;  // Merging acc1 into acc2, keeping acc2's record

// Possible Output: The Account record acc1 is merged into acc2, keeping acc2's r

*/
